package main_test

import (
	main "a21hc3NpZ25tZW50"

	. "github.com/onsi/ginkgo/v2"
	. "github.com/onsi/gomega"
)

type TestData struct {
	input    []int
	Expected []int
}

var _ = Describe("Main", func() {
	Describe("Sortheight", func() {
		When("the input heights is empty", func() {
			It("should return empty slice of int", func() {
				actual := main.Sortheight([]int{})

				Expect(actual).To(Equal([]int{}))
				Expect(actual).To(BeEmpty())
			})
		})

		When("the input heights is sorted", func() {
			It("should return the same data", func() {
				testData := []TestData{
					{[]int{100, 120, 130, 140, 150, 160, 170, 175, 180, 181, 182, 183}, []int{100, 120, 130, 140, 150, 160, 170, 175, 180, 181, 182, 183}},
					{[]int{150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 162, 163, 166, 167, 167, 167, 167, 167, 168, 169, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 172, 173, 174, 175, 176, 177, 178, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180}, []int{150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 162, 163, 166, 167, 167, 167, 167, 167, 168, 169, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 172, 173, 174, 175, 176, 177, 178, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180}},
				}

				for _, test := range testData {
					actual := main.Sortheight(test.input)
					Expect(actual).To(Equal(test.Expected))
					Expect(actual).ToNot(BeEmpty())
				}
			})
		})

		When("the input data is random height", func() {
			It("should return data sorted from lowest to highest", func() {
				testData := []TestData{
					{[]int{172, 170, 150, 165, 144, 155, 159, 170, 150, 165, 166, 169, 169, 167, 165, 175, 180}, []int{144, 150, 150, 155, 159, 165, 165, 165, 166, 167, 169, 169, 170, 170, 172, 175, 180}},
					{[]int{172, 170, 150, 165, 144, 155, 159, 170, 150, 165, 166, 169, 169, 167, 165, 175, 180, 171, 170, 170, 176, 151, 155, 161, 160, 151, 145, 146, 144, 151, 170, 170, 150, 165, 144, 155, 159, 170, 150, 165, 166, 169, 169, 167, 165, 175, 182, 172, 171, 172, 177, 151, 155, 161, 161, 159, 170, 150, 165, 166, 168, 169, 167, 165, 175, 185, 171, 173, 141, 140, 145, 170, 171, 172, 155, 161, 161, 159, 170, 150, 165, 166, 168, 169, 167, 165, 175, 185}, []int{140, 141, 144, 144, 144, 145, 145, 146, 150, 150, 150, 150, 150, 150, 151, 151, 151, 151, 155, 155, 155, 155, 155, 159, 159, 159, 159, 160, 161, 161, 161, 161, 161, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 166, 166, 166, 166, 167, 167, 167, 167, 168, 168, 169, 169, 169, 169, 169, 169, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 171, 171, 171, 171, 172, 172, 172, 172, 173, 175, 175, 175, 175, 176, 177, 180, 182, 185, 185}},
				}

				for _, test := range testData {
					actual := main.Sortheight(test.input)
					Expect(actual).To(Equal(test.Expected))
					Expect(actual).ToNot(BeEmpty())
				}
			})
		})

		When("the input heights from highest to lowest", func() {
			It("should return data sorted from lowest to highest", func() {
				testData := []TestData{
					{[]int{183, 182, 181, 180, 175, 170, 160, 150, 140, 130, 120, 100}, []int{100, 120, 130, 140, 150, 160, 170, 175, 180, 181, 182, 183}},
					{[]int{180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 178, 177, 176, 175, 174, 173, 172, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 169, 168, 167, 167, 167, 167, 167, 166, 163, 162, 161, 160, 157, 156, 155, 154, 153, 152, 151, 150}, []int{150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 162, 163, 166, 167, 167, 167, 167, 167, 168, 169, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 172, 173, 174, 175, 176, 177, 178, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180}},
				}

				for _, test := range testData {
					actual := main.Sortheight(test.input)
					Expect(actual).To(Equal(test.Expected))
					Expect(actual).ToNot(BeEmpty())
				}
			})
		})
	})
})
